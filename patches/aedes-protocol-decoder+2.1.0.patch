diff --git a/node_modules/aedes-protocol-decoder/index.js b/node_modules/aedes-protocol-decoder/index.js
index bd0ac9d..816dc68 100644
--- a/node_modules/aedes-protocol-decoder/index.js
+++ b/node_modules/aedes-protocol-decoder/index.js
@@ -1,7 +1,29 @@
 'use strict'
 
+/**
+ * @typedef ConnectionDetails
+ * @property {string} ipAddress
+ * @property {number} port
+ * @property {string} serverIpAddress
+ * @property {number} serverPort
+ * @property {4 | 6 | 0} ipFamily
+ * @property {boolean} isWebsocket
+ * @property {boolean} isTls
+ * @property {0 | 1 | 2} isProxy
+ * @property {boolean | undefined} certAuthorized
+ * @property {object | import('tls').PeerCertificate | undefined} cert
+ * @property {Buffer | undefined} data
+ */
+
+/**
+ * @typedef HttpConnection
+ * @property {Socket} _socket
+ */
+
 const proxyProtocol = require('proxy-protocol-js')
 const forwarded = require('forwarded')
+const { IncomingMessage } = require('http')
+const { Socket } = require('net')
 
 const v1ProxyProtocolSignature = Buffer.from('PROXY ', 'utf8')
 const v2ProxyProtocolSignature = Buffer.from('0d0a0d0a000d0a515549540a', 'hex')
@@ -43,7 +65,15 @@ function getProtoIpFamily (ipFamily) {
   return 0
 }
 
+/**
+ *
+ * @param {IncomingMessage} req
+ * @param {HttpConnection} socket
+ * @param {ConnectionDetails} proto
+ * @returns {ConnectionDetails}
+ */
 function extractHttpDetails (req, socket, proto = {}) {
+  // TODO: replace socket arg by req.socket ?
   const headers = req && req.headers ? req.headers : null
   if (headers) {
     if (headers['x-forwarded-for']) {
@@ -54,6 +84,7 @@ function extractHttpDetails (req, socket, proto = {}) {
     if (headers['x-real-ip']) {
       proto.ipAddress = headers['x-real-ip']
     }
+    proto.serverPort = socket._socket.address()?.port
     proto.port = socket._socket.remotePort
     proto.ipFamily = getProtoIpFamily(socket._socket.remoteFamily)
     proto.isWebsocket = true
@@ -61,6 +92,12 @@ function extractHttpDetails (req, socket, proto = {}) {
   return proto
 }
 
+/**
+ *
+ * @param {Buffer} buffer
+ * @param {ConnectionDetails} proto
+ * @returns {ConnectionDetails}
+ */
 function extractProxyDetails (buffer, proto = {}) {
   let proxyProto
   if (isValidV1ProxyProtocol(buffer)) {
@@ -70,6 +107,7 @@ function extractProxyDetails (buffer, proto = {}) {
       proto.ipAddress = proxyProto.source.ipAddress
       proto.port = proxyProto.source.port
       proto.serverIpAddress = proxyProto.destination.ipAddress
+      proto.serverPort = proxyProto.destination.port
       proto.data = proxyProto.data
       proto.isProxy = 1
     }
@@ -80,11 +118,13 @@ function extractProxyDetails (buffer, proto = {}) {
         proto.ipAddress = proxyProto.proxyAddress.sourceAddress.address.join('.')
         proto.port = proxyProto.proxyAddress.sourcePort
         proto.serverIpAddress = proxyProto.proxyAddress.destinationAddress.address.join('.')
+        proto.serverPort = proxyProto.proxyAddress.sourcePort
         proto.ipFamily = 4
       } else if (proxyProto.proxyAddress instanceof proxyProtocol.IPv6ProxyAddress) {
         proto.ipAddress = parseIpV6Array(proxyProto.proxyAddress.sourceAddress.address)
         proto.port = proxyProto.proxyAddress.sourcePort
         proto.serverIpAddress = parseIpV6Array(proxyProto.proxyAddress.destinationAddress.address)
+        proto.serverPort = proxyProto.proxyAddress.destinationPort
         proto.ipFamily = 6
       }
       proto.isProxy = 2
@@ -94,38 +134,62 @@ function extractProxyDetails (buffer, proto = {}) {
   return proto
 }
 
+
+/**
+ *
+ * @param {Socket | HttpConnection} socket
+ * @param {ConnectionDetails} proto
+ * @returns {ConnectionDetails}
+ */
 function extractSocketTLSDetails (socket, proto = {}) {
   socket = socket._socket || socket
   if (socket.getPeerCertificate && typeof socket.getPeerCertificate === 'function') {
     proto.certAuthorized = socket.authorized
     proto.cert = socket.getPeerCertificate(true)
+    proto.isTls = true
   }
   return proto
 }
 
+/**
+ *
+ * @param {Socket | HttpConnection} socket
+ * @param {ConnectionDetails} proto
+ * @returns {ConnectionDetails}
+ */
 function extractSocketDetails (socket, proto = {}) {
   if (socket._socket && socket._socket.address) {
     proto.isWebsocket = true
     proto.ipAddress = socket._socket.remoteAddress
     proto.port = socket._socket.remotePort
     proto.serverIpAddress = socket._socket.address().address
+    proto.serverPort = socket._socket.address().port
     proto.ipFamily = getProtoIpFamily(socket._socket.remoteFamily)
   } else if (socket.address) {
     proto.ipAddress = socket.remoteAddress
     proto.port = socket.remotePort
     proto.serverIpAddress = socket.address().address
+    proto.serverPort = socket.address().port
     proto.ipFamily = getProtoIpFamily(socket.remoteFamily)
   }
   extractSocketTLSDetails(socket, proto)
   return proto
 }
 
+/**
+ *
+ * @param {import('aedes').Connection} conn
+ * @param {Buffer} buffer
+ * @param {IncomingMessage} req
+ * @returns {ConnectionDetails}
+ */
 function protocolDecoder (conn, buffer, req) {
   const proto = {}
   if (!buffer) return proto
   const socket = conn.socket || conn
   proto.isProxy = 0
   proto.isWebsocket = false
+  proto.isTls = false
   extractHttpDetails(req, socket, proto)
   extractProxyDetails(buffer, proto)
   if (!proto.ipAddress) {
diff --git a/node_modules/aedes-protocol-decoder/types/index.d.ts b/node_modules/aedes-protocol-decoder/types/index.d.ts
index bf0fcd1..b1cea2d 100644
--- a/node_modules/aedes-protocol-decoder/types/index.d.ts
+++ b/node_modules/aedes-protocol-decoder/types/index.d.ts
@@ -13,8 +13,10 @@ export interface ConnectionDetails {
   port: number
   ipFamily: number
   serverIpAddress: string
+  serverPort: number
   isWebsocket: boolean
   isProxy: number
+  isTls: boolean
   certAuthorized?: boolean,
   cert?: PeerCertificate | {} | null,
   data?: Buffer
